package com.tpe.dpsolver.client.parser;

/* DCParser.java */
/* Generated By:JavaCC: Do not edit this line. DCParser.java */
import java.util.ArrayList;
import java.util.Vector;

import com.tpe.dpsolver.client.logic.structures.Clausula;


public class DCParser implements DCParserConstants {

public Vector<Clausula> Parsear(DCParser parser) throws ParseException{
    DCParser second = new DCParser("{" + parser.Formula() + "}\u005cr");
    DCParser dc = new DCParser( "{" + second.Formula() + "}\u005cr");
    ArrayList <ArrayList <String>> s = dc.ExpressionList();
    
    Vector<Clausula> resueltas = new Vector<Clausula>();
    for(int i = 0; i < s.size(); i++){
    	Clausula temporal = new Clausula();
    	for(int j = 0; j < s.get(i).size(); j++){
    		temporal.addPlain(s.get(i).get(j).length() == 1, s.get(i).get(j).charAt(s.get(i).get(j).length() - 1));
    	}
  	resueltas.add(temporal);
  }
  return resueltas;
  }

/** Top level production. */
  final public String Formula() throws ParseException {
    trace_call("Formula");
    try {String s;
System.out.println("Please type in an expression followed by a \";\" or ^D to quit:");
          System.out.println("");
      jj_consume_token(LBRACE);
      s = Sentence(false,true,true);
      jj_consume_token(RBRACE);
System.out.println("Result >>");
    System.out.println(s);
    return s;
    } finally {
      trace_return("Formula");
    }
  }

  final public String Sentence(boolean negacion, boolean conjuncion, boolean noAction) throws ParseException {
    trace_call("Sentence");
    try {String s;
      if (jj_2_1(2)) {
        s = AtomicSentence(negacion);
return s;
      } else if (jj_2_2(100)) {
        s = Equivalence(negacion, conjuncion, noAction);
return s;
      } else if (jj_2_3(100)) {
        s = Implication(negacion, conjuncion, noAction);
return s;
      } else if (jj_2_4(100)) {
        s = Conjunction(negacion, conjuncion, noAction);
return s;
      } else if (jj_2_5(100)) {
        s = Disjunction(negacion, conjuncion, noAction);
return s;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Sentence");
    }
  }

  final public String Equivalence(boolean negacion, boolean conjuncion, boolean noAction) throws ParseException {
    trace_call("Equivalence");
    try {String s,t;
      if (jj_2_6(2)) {
        jj_consume_token(LP);
        s = Sentence(false,false,true);
        jj_consume_token(IFF);
        t = Sentence(false,false,true);
        jj_consume_token(RP);
if(negacion)
        return "(-(" + s + "=>" + t + ")v-(" + t + "=>" + s + "))";
      else
        return "((" + s + "=>" + t + ")^(" + t + "=>" + s + "))";
      } else if (jj_2_7(2)) {
        jj_consume_token(NEG);
        jj_consume_token(LP);
        s = Sentence(false,false,true);
        jj_consume_token(IFF);
        t = Sentence(false,false,true);
        jj_consume_token(RP);
if(negacion)
        return "((" + s + "=>" + t + ")^(" + t + "=>" + s + "))";
      else
        return "(-(" + s + "=>" + t + ")v-(" + t + "=>" + s + "))";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Equivalence");
    }
  }

  final public String Implication(boolean negacion, boolean conjuncion, boolean noAction) throws ParseException {
    trace_call("Implication");
    try {String t,h;
      if (jj_2_8(2)) {
        jj_consume_token(LP);
        h = Sentence(!negacion,negacion,false);
        jj_consume_token(IMPL);
        t = Sentence(negacion,negacion,false);
        jj_consume_token(RP);
if(negacion)
        if(noAction)
          return "(" + h + "^" + t + ")";
        else
          if(conjuncion)
            return h + "^" + t;
          else
            return "(" + h + "^" + t + ")";
      else
        if(noAction)
          return "(" + h + "v" + t + ")";
        else
          if(conjuncion)
            return "(" + h + "v" + t + ")";
          else
            return h + "v" + t;
      } else if (jj_2_9(2)) {
        jj_consume_token(NEG);
        jj_consume_token(LP);
        h = Sentence(negacion,!negacion,false);
        jj_consume_token(IMPL);
        t = Sentence(!negacion,!negacion,false);
        jj_consume_token(RP);
if(negacion)
        if(noAction)
          return "(" + h + "v" + t + ")";
        else
          if(conjuncion)
            return "(" + h + "v" + t + ")";
          else
            return h + "v" + t;
      else
        if(noAction)
          return "(" + h + "^" + t + ")";
        else
          if(conjuncion)
            return h + "^" + t;
          else
            return "(" + h + "^" + t + ")";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Implication");
    }
  }

  final public String Conjunction(boolean negacion, boolean conjuncion, boolean noAction) throws ParseException {
    trace_call("Conjunction");
    try {String s;
  String devolver;
      if (jj_2_12(2)) {
devolver = "";
        jj_consume_token(LP);
        s = Sentence(negacion, !negacion, false);
devolver += s;
        label_1:
        while (true) {
          jj_consume_token(CONJ);
          s = Sentence(negacion, !negacion, false);
if(negacion)
        devolver += "v" + s;
      else
        devolver += "^" + s;
          if (jj_2_10(2)) {
            ;
          } else {
            break label_1;
          }
        }
        jj_consume_token(RP);
if(noAction)
        return "(" + devolver + ")";
      else
        if(negacion)
          if(conjuncion)
            return "(" + devolver + ")";
          else
            return devolver;
        else
          if(conjuncion)
            return devolver;
          else
            return "(" + devolver + ")";
      } else if (jj_2_13(2)) {
devolver = "";
        jj_consume_token(NEG);
        jj_consume_token(LP);
        s = Sentence((!negacion && true)||(negacion && false), negacion, noAction);
devolver += s;
        label_2:
        while (true) {
          jj_consume_token(CONJ);
          s = Sentence((!negacion && true)||(negacion && false), negacion, noAction);
if(negacion)
        devolver += "^" + s;
      else
        devolver += "v" + s;
          if (jj_2_11(2)) {
            ;
          } else {
            break label_2;
          }
        }
        jj_consume_token(RP);
if(noAction)
        return "(" + devolver + ")";
      else
        if(negacion)
          if(conjuncion)
            return devolver;
          else
            return "(" + devolver + ")";
        else
          if(conjuncion)
            return "(" + devolver + ")";
          else
            return devolver;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Conjunction");
    }
  }

  final public String Disjunction(boolean negacion, boolean conjuncion, boolean noAction) throws ParseException {
    trace_call("Disjunction");
    try {String s;
  String devolver;
      if (jj_2_16(2)) {
devolver = "";
        jj_consume_token(LP);
        s = Sentence(negacion, negacion, false);
devolver += s;
        label_3:
        while (true) {
          jj_consume_token(DISY);
          s = Sentence(negacion, negacion, false);
if(negacion)
        devolver += "^" + s;
      else
        devolver += "v" + s;
          if (jj_2_14(2)) {
            ;
          } else {
            break label_3;
          }
        }
        jj_consume_token(RP);
if(noAction)
        return "(" + devolver + ")";
      else
        if(negacion)
          if(conjuncion)
            return devolver;
          else
            return "(" + devolver + ")";
        else
          if(conjuncion)
            return "(" + devolver + ")";
          else
            return devolver;
      } else if (jj_2_17(2)) {
devolver = "";
        jj_consume_token(NEG);
        jj_consume_token(LP);
        s = Sentence((!negacion && true)||(negacion && false), !negacion, false);
devolver += s;
        label_4:
        while (true) {
          jj_consume_token(DISY);
          s = Sentence((!negacion && true)||(negacion && false), !negacion, false);
if(negacion)
        devolver += "v" + s;
      else
        devolver += "^" + s;
          if (jj_2_15(2)) {
            ;
          } else {
            break label_4;
          }
        }
        jj_consume_token(RP);
if(noAction)
        return "(" + devolver + ")";
      else
        if(negacion)
          if(conjuncion)
            return "(" + devolver + ")";
          else
            return devolver;
        else
          if(conjuncion)
            return devolver;
          else
            return "(" + devolver + ")";
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Disjunction");
    }
  }

  final public String AtomicSentence(boolean negacion) throws ParseException {
    trace_call("AtomicSentence");
    try {String s;
        Token t;
      t = jj_consume_token(LITERAL);
if(!negacion)
      return(t.image);
    else{
      s= "-" + t.image;
      if(s.length() > 2)
        return s.substring(s.length()-1);
      else
        return s;
    }
    } finally {
      trace_return("AtomicSentence");
    }
  }

  final public ArrayList <ArrayList <String>> ExpressionList() throws ParseException {
    trace_call("ExpressionList");
    try {ArrayList <ArrayList <String>>  s;
      jj_consume_token(LBRACE);
      s = ArrSentence();
      jj_consume_token(RBRACE);
return s;
    } finally {
      trace_return("ExpressionList");
    }
  }

  final public ArrayList <ArrayList <String>> ArrSentence() throws ParseException {
    trace_call("ArrSentence");
    try {ArrayList <ArrayList <String>>  s;
      if (jj_2_18(100)) {
        s = NFDisjunction(true);
return s;
      } else if (jj_2_19(100)) {
        s = NFConjunction(true);
return s;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ArrSentence");
    }
  }

  final public ArrayList <String> FinalDSentence() throws ParseException {
    trace_call("FinalDSentence");
    try {ArrayList <String> s;
      if (jj_2_20(100)) {
        s = FDisjunction();
return s;
      } else if (jj_2_21(2)) {
        s = ArrAtomicSentence();
return s;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("FinalDSentence");
    }
  }

  final public ArrayList <String> FinalCSentence() throws ParseException {
    trace_call("FinalCSentence");
    try {ArrayList <String> s;
      if (jj_2_22(100)) {
        s = FConjunction();
return s;
      } else if (jj_2_23(2)) {
        s = ArrAtomicSentence();
return s;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("FinalCSentence");
    }
  }

  final public ArrayList <ArrayList <String>> NFDisjunction(boolean primero) throws ParseException {
    trace_call("NFDisjunction");
    try {ArrayList <String>  s;
  ArrayList <String> parcial = new ArrayList <String>();
  ArrayList <ArrayList <String>> devolver = new ArrayList <ArrayList <String>>();
  ArrayList <ArrayList <String>> ll = new ArrayList <ArrayList <String>>();
  ArrayList <ArrayList <String>> dom = new ArrayList <ArrayList <String>>();
      jj_consume_token(LP);
      if (jj_2_24(100)) {
        s = FinalCSentence();
dom.add(s);
      } else if (jj_2_25(2)) {
        ll = NFConjunction(false);
for(int i=0;i < ll.size();i++)
          dom.add(ll.get(i));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_5:
      while (true) {
        jj_consume_token(DISY);
        if (jj_2_26(100)) {
          s = FinalCSentence();
dom.add(s);
        } else if (jj_2_27(2)) {
          ll = NFConjunction(false);
for(int i=0;i < ll.size();i++)
                dom.add(ll.get(i));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_28(2)) {
          ;
        } else {
          break label_5;
        }
      }
      jj_consume_token(RP);
BackTrack(dom, dom.size(), 0, parcial, devolver);
      return devolver;
    } finally {
      trace_return("NFDisjunction");
    }
  }

  final public ArrayList <ArrayList <String>> NFConjunction(boolean primero) throws ParseException {
    trace_call("NFConjunction");
    try {ArrayList <String>  s;
  ArrayList <String> parcial = new ArrayList <String>();
  ArrayList <ArrayList <String>> devolver = new ArrayList <ArrayList <String>>();
  ArrayList <ArrayList <String>> ll = new ArrayList <ArrayList <String>>();
  ArrayList <ArrayList <String>> dom = new ArrayList <ArrayList <String>>();
      jj_consume_token(LP);
      if (jj_2_29(100)) {
        s = FinalDSentence();
dom.add(s);
      } else if (jj_2_30(2)) {
        ll = NFDisjunction(false);
for(int i=0;i < ll.size();i++)
            dom.add(ll.get(i));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_6:
      while (true) {
        jj_consume_token(CONJ);
        if (jj_2_31(100)) {
          s = FinalDSentence();
dom.add(s);
        } else if (jj_2_32(2)) {
          ll = NFDisjunction(false);
for(int i=0;i < ll.size();i++)
                dom.add(ll.get(i));
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_33(2)) {
          ;
        } else {
          break label_6;
        }
      }
      jj_consume_token(RP);
      if(!primero){
    	  BackTrack(dom, dom.size(), 0, parcial, devolver);
          return devolver;  
      }
      return dom;
    } finally {
      trace_return("NFConjunction");
    }
  }

  final public ArrayList <String> FDisjunction() throws ParseException {
    trace_call("FDisjunction");
    try {ArrayList <String> s;
  ArrayList <String> devolver = new ArrayList <String>();
      jj_consume_token(LP);
      s = ArrAtomicSentence();
devolver.add(s.get(0));
      label_7:
      while (true) {
        jj_consume_token(DISY);
        s = ArrAtomicSentence();
devolver.add(s.get(0));
        if (jj_2_34(2)) {
          ;
        } else {
          break label_7;
        }
      }
      jj_consume_token(RP);
return devolver;
    } finally {
      trace_return("FDisjunction");
    }
  }

  final public ArrayList <String> FConjunction() throws ParseException {
    trace_call("FConjunction");
    try {ArrayList <String> s;
  ArrayList <String> devolver = new ArrayList <String>();
      jj_consume_token(LP);
      s = ArrAtomicSentence();
devolver.add(s.get(0));
      label_8:
      while (true) {
        jj_consume_token(CONJ);
        s = ArrAtomicSentence();
devolver.add(s.get(0));
        if (jj_2_35(2)) {
          ;
        } else {
          break label_8;
        }
      }
      jj_consume_token(RP);
return devolver;
    } finally {
      trace_return("FConjunction");
    }
  }

  final public ArrayList <String> ArrAtomicSentence() throws ParseException {
    trace_call("ArrAtomicSentence");
    try {Token t;
  String s = new String();
  ArrayList <String> ret = new ArrayList <String>();
      t = jj_consume_token(LITERAL);
s = t.image;
    ret.add(s);
    return(ret);
    } finally {
      trace_return("ArrAtomicSentence");
    }
  }

  final public void BackTrack(ArrayList <ArrayList <String>> dominio, int n, int hijo, ArrayList <String> parcial,
                ArrayList <ArrayList <String>> devolver) throws ParseException {
    trace_call("BackTrack");
    try {
if(hijo >= n){
    System.out.println("<<<<<<<<<<<<<<BACKTRACK <<<<<<<<<<<");
    System.out.println("Adding..." + parcial);
    devolver.add(parcial);
    System.out.println("devolver..." + devolver);
    }
  else{
    for(int i=0; i < dominio.get(hijo).size(); i++){
      System.out.println("Adding.. " + dominio.get(hijo).get(i));
      parcial.add(new String(dominio.get(hijo).get(i)));
      BackTrack(dominio,n,hijo + 1,parcial,devolver);
      if(i != dominio.get(hijo).size() - 1 ){
        ArrayList <String> nueva = new ArrayList <String>();
          for(int o=0; o < parcial.size() -n + hijo; o++)
             nueva.add(new String(parcial.get(o)));
          parcial = nueva;
        }
      }
    }
    } finally {
      trace_return("BackTrack");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_3_34()
 {
    if (jj_scan_token(DISY)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(DISY)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_scan_token(NEG)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_scan_token(CONJ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    if (jj_3_33()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(IMPL)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(CONJ)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(NEG)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(IFF)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(NEG)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_scan_token(DISY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(IFF)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(LP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    if (jj_3_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(CONJ)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(DISY)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(NEG)) return true;
    if (jj_scan_token(LP)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_scan_token(CONJ)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(LP)) return true;
    if (jj_3R_18()) return true;
    Token xsp;
    if (jj_3_35()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RP)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DCParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor. */
  public DCParser(Provider stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new DCParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DCParser(String dsl) throws ParseException, TokenMgrException {
      this(new StringProvider(dsl));
  }

  public void ReInit(String s) {
     ReInit(new StringProvider(s));
  }
  /** Reinitialise. */
  public void ReInit(Provider stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new DCParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DCParser(DCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DCParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.RuntimeException { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : DCParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  protected void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  protected void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  protected void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + TokenMgrException.addEscapes(t.image) + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  protected void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + TokenMgrException.addEscapes(t1.image) + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
              case 18: jj_3_19(); break;
              case 19: jj_3_20(); break;
              case 20: jj_3_21(); break;
              case 21: jj_3_22(); break;
              case 22: jj_3_23(); break;
              case 23: jj_3_24(); break;
              case 24: jj_3_25(); break;
              case 25: jj_3_26(); break;
              case 26: jj_3_27(); break;
              case 27: jj_3_28(); break;
              case 28: jj_3_29(); break;
              case 29: jj_3_30(); break;
              case 30: jj_3_31(); break;
              case 31: jj_3_32(); break;
              case 32: jj_3_33(); break;
              case 33: jj_3_34(); break;
              case 34: jj_3_35(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
